# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#   Given an array of fence device configs, limit themto fence devices whose MAC address is present onsome of the local NICs, and prepare a hash which can bepassed to create_resources function
#
Puppet::Functions.create_function(:'tripleo::local_fence_devices') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
    agent = args[0]
    devices = args[1]
    unless agent.is_a?(String) && agent.length > 0
      raise Puppet::ParseError, "local_fence_devices: Argument 'agent' must be a non-empty string. The value given was: #{agent_type}"
    end
    unless devices.is_a?(Array)
      raise Puppet::ParseError, "local_fence_devices: Argument 'devices' must be an array. The value given was: #{devices}"
    end

    # filter by agent type
    agent_type_devices = devices.select { |device| device['agent'] == agent }

    # filter by local mac address
    local_devices = agent_type_devices.select do |device|
      function_has_interface_with(['macaddress', device['host_mac']])
    end

    # construct a hash for create_resources
    return local_devices.each_with_object({}) do |device, hash|
      # disallow collisions
      if hash[device['host_mac']]
         raise Puppet::ParseError, "local_fence_devices: Only single fence device per agent per host is allowed. Collision on #{device['host_mac']} for #{agent}"
      end

      hash[device['host_mac']] = device['params'] || {}
    end
  
  end
end
